// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	cart "project/e-commerce/features/cart"

	mock "github.com/stretchr/testify/mock"
)

// CartData is an autogenerated mock type for the DataInterface type
type CartData struct {
	mock.Mock
}

// DeleteData provides a mock function with given fields: userID, cartID
func (_m *CartData) DeleteData(userID int, cartID int) (int, error) {
	ret := _m.Called(userID, cartID)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(userID, cartID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userID, cartID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertData provides a mock function with given fields: data
func (_m *CartData) InsertData(data cart.Core) (int, error) {
	ret := _m.Called(data)

	var r0 int
	if rf, ok := ret.Get(0).(func(cart.Core) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(cart.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectByToken provides a mock function with given fields: token
func (_m *CartData) SelectByToken(token int) ([]cart.Core, error) {
	ret := _m.Called(token)

	var r0 []cart.Core
	if rf, ok := ret.Get(0).(func(int) []cart.Core); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cart.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateData provides a mock function with given fields: cartID, token, update
func (_m *CartData) UpdateData(cartID int, token int, update string) (int, error) {
	ret := _m.Called(cartID, token, update)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int, string) int); ok {
		r0 = rf(cartID, token, update)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, string) error); ok {
		r1 = rf(cartID, token, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCartData interface {
	mock.TestingT
	Cleanup(func())
}

// NewCartData creates a new instance of CartData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCartData(t mockConstructorTestingTNewCartData) *CartData {
	mock := &CartData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
