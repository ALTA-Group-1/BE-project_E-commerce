// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	product "project/e-commerce/features/product"

	mock "github.com/stretchr/testify/mock"
)

// ProductUsecase is an autogenerated mock type for the UsecaseInterface type
type ProductUsecase struct {
	mock.Mock
}

// DeleteData provides a mock function with given fields: param, token
func (_m *ProductUsecase) DeleteData(param int, token int) (int, error) {
	ret := _m.Called(param, token)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(param, token)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(param, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllProduct provides a mock function with given fields: page
func (_m *ProductUsecase) GetAllProduct(page int) ([]product.Core, error) {
	ret := _m.Called(page)

	var r0 []product.Core
	if rf, ok := ret.Get(0).(func(int) []product.Core); ok {
		r0 = rf(page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: param
func (_m *ProductUsecase) GetById(param int) (product.Core, error) {
	ret := _m.Called(param)

	var r0 product.Core
	if rf, ok := ret.Get(0).(func(int) product.Core); ok {
		r0 = rf(param)
	} else {
		r0 = ret.Get(0).(product.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMyProduct provides a mock function with given fields: token
func (_m *ProductUsecase) GetMyProduct(token int) ([]product.Core, error) {
	ret := _m.Called(token)

	var r0 []product.Core
	if rf, ok := ret.Get(0).(func(int) []product.Core); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostData provides a mock function with given fields: data
func (_m *ProductUsecase) PostData(data product.Core) (int, error) {
	ret := _m.Called(data)

	var r0 int
	if rf, ok := ret.Get(0).(func(product.Core) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(product.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutData provides a mock function with given fields: token, newData
func (_m *ProductUsecase) PutData(token int, newData product.Core) (int, error) {
	ret := _m.Called(token, newData)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, product.Core) int); ok {
		r0 = rf(token, newData)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, product.Core) error); ok {
		r1 = rf(token, newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductUsecase creates a new instance of ProductUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductUsecase(t mockConstructorTestingTNewProductUsecase) *ProductUsecase {
	mock := &ProductUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
